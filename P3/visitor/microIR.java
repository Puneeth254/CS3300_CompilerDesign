//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */

class Object{
   String parent;
   String name;
   Map<String, Integer> fields;
   Map<String, Integer> methods;
   Map<String, String> id_temp;
   Map<String, String> fieldType;
   Map<String, String> fromparmeth;
   Map<String, String> mthdType;
   
   Object(){
      name = "";
      parent = "";
      fields = new LinkedHashMap<>();
      methods = new LinkedHashMap<>();
      id_temp = new LinkedHashMap<>();
      fieldType = new LinkedHashMap<>();
      fromparmeth = new LinkedHashMap<>();
      mthdType = new LinkedHashMap<>();
   }
}

public class microIR extends GJNoArguDepthFirst<String> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   Map<String, Object> classes = new LinkedHashMap<>();
   Map<String, String> allocated = new LinkedHashMap<>();

   Object currentClass = null;

   String currentMethod = "";
   String addMethod;
   String addClass;
   String typedec;
   String stmt;
   String classtypeParam = "";
   String retTemp = "";
   String workingClass = "";
   String funcall = "";
   String explist = "";

   boolean isMethod = false;
   boolean debug = false;
   boolean isIdentifier = false;
   boolean assignment = false;
   boolean andor = false;

   int cnt;
   int numParameters;
   int numVar;
   int tempCounter = 0;
   int labelCounter = 0;
   int store = 0;


   public String new_temp(){
      return "TEMP " + Integer.toString(tempCounter++);
   }

   public String new_Label(){
      return "L"+ Integer.toString(labelCounter++);
   }

   public void update(String cname){
      if(classes.get(cname).parent == ""){
         return;
      }
      String par = classes.get(cname).parent;
      update(par);

      Object parobj = classes.get(par);
      Object obj = classes.get(cname);

      Map<String, Integer> fields1 = new LinkedHashMap<>();
      Map<String, Integer> methods1 = new LinkedHashMap<>();
      Map<String, String> fieldType1 = new LinkedHashMap<>();
      Map<String, Integer> methods2 = new LinkedHashMap<>();

      methods2 = obj.methods;
      fields1 = parobj.fields;
      methods1 = parobj.methods;
      fieldType1 = parobj.fieldType;


      int count = fields1.size();
      int count1 = count * 4 + 4;
      for(String k : obj.fields.keySet()){
         if(fields1.get(k) == null){
            fields1.put(k, count1);
            count1 += 4;
         }
      }
      obj.fields = fields1;

      for(String k : obj.fieldType.keySet()){
         if(fieldType1.get(k) == null){
            fieldType1.put(k, obj.fieldType.get(k));
         }
         else{
            fieldType1.replace(k, obj.fieldType.get(k));
         }
      }
      obj.fieldType = fieldType1;
      
      Map<String, String> new_methods = new LinkedHashMap<>();

      for(String k : obj.methods.keySet()){
         if(methods1.get(k) == null){
            methods1.put(k, obj.methods.get(k));
         }
         else{
            methods1.replace(k, obj.methods.get(k));
         }
      }
      obj.methods = methods1;
      
      for(String k : methods1.keySet()){
         if(methods2.get(k) == null){
            new_methods.put(k, "1");
            String x = par;
            while(true){
               Object o = classes.get(x);
               if(o.fromparmeth.get(k) == null){
                  obj.fromparmeth.put(k, x);
                  break;
               }
               x = o.parent;
            }
         }
      }

      for(String k : parobj.id_temp.keySet()){
         String temp = k;
         String[] arr1 = k.split(",");
         if(new_methods.get(arr1[0]) != null){
            obj.id_temp.put(temp, parobj.id_temp.get(temp));
         }
      }

      for(String k : parobj.mthdType.keySet()){
         if(obj.mthdType.get(k) == null){
            obj.mthdType.put(k, parobj.mthdType.get(k));
         }
      }

      return;
   }

   public String visit(NodeList n) {
      String ans = "\n";
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return ans;
   }

   public String visit(NodeListOptional n) {
      if ( n.present() ) {
         String ans = "\n";
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return ans;
      }
      else
         return null;
   }

   public String visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public String visit(NodeSequence n) {
      String ans = "\n";
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return ans;
   }

   public String visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public String visit(Goal n) {
      String ans = "";
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);

      store = 1;

      for(String k : classes.keySet()){
         update(k);
      }

      store = 2;
      ans += n.f0.accept(this);
      typedec = "";
      n.f1.accept(this);
      ans += typedec;
      n.f2.accept(this);
      System.out.println(ans);
      return ans;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public String visit(MainClass n) {
      String ans = "";
      ans += "MAIN";
      n.f0.accept(this);
      n.f1.accept(this);
      Object new_class = new Object();
      new_class.name = n.f1.f0.tokenImage;
      currentClass = new_class;
      if(store == 0){
         classes.put(n.f1.f0.tokenImage, new_class);
      }
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      n.f12.accept(this);
      n.f13.accept(this);
      tempCounter = 0;
      labelCounter = 0;
      ans += n.f14.accept(this);
      n.f15.accept(this);
      n.f16.accept(this);
      ans += "\nEND";
      return ans;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public String visit(TypeDeclaration n) {
      String ans = "\n";
      addClass = "";
      n.f0.accept(this);
      if(store == 2){typedec += addClass;}
      return ans;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public String visit(ClassDeclaration n) {
      String ans = "\n";
      n.f0.accept(this);
      n.f1.accept(this);
      Object new_class = new Object();
      new_class.name = n.f1.f0.tokenImage;
      currentClass = new_class;
      n.f2.accept(this);
      cnt = 4;
      n.f3.accept(this);
      addMethod = "";
      n.f4.accept(this);
      ans += addMethod;
      n.f5.accept(this);
      if(store == 0){
         classes.put(n.f1.f0.tokenImage, new_class);
      }
      else{
         addClass += ans;
      }
      return ans;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public String visit(ClassExtendsDeclaration n) {
      String ans = "\n";
      n.f0.accept(this);
      n.f1.accept(this);
      Object new_class = new Object();
      new_class.name = n.f1.f0.tokenImage;
      currentClass = new_class;
      n.f2.accept(this);
      n.f3.accept(this);
      currentClass.parent = n.f3.f0.tokenImage;
      addMethod = "";
      n.f4.accept(this);
      cnt = 4;
      n.f5.accept(this);
      n.f6.accept(this);
      ans += addMethod;
      n.f7.accept(this);
      if(store == 0){
         classes.put(n.f1.f0.tokenImage, new_class);
      }
      else{
         addClass += ans;
      }
      return ans;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public String visit(VarDeclaration n) {
      String ans = "\n";
      classtypeParam = "";
      n.f0.accept(this);
      String tempstr = classtypeParam;
      n.f1.accept(this);
      String r = retTemp;
      if(store == 0 && !isMethod){
         currentClass.fields.put(n.f1.f0.tokenImage, cnt);
         if(!tempstr.equals("")){
            currentClass.fieldType.put(n.f1.f0.tokenImage, tempstr);
         }
         cnt += 4;
      }
      else if(store == 0){
         currentClass.id_temp.put(currentMethod + "," + n.f1.f0.tokenImage, new_temp());
      }
      if(isMethod){
         numVar++;
      }
      if(store == 2 && isMethod && !tempstr.equals("")){
         allocated.put(r, tempstr);
      }
      n.f2.accept(this);
      return ans;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public String visit(MethodDeclaration n) {
      String ans = "\n";
      n.f0.accept(this);
      classtypeParam = "";
      n.f1.accept(this);
      String methodreturn = classtypeParam;
      n.f2.accept(this);
      currentMethod = n.f2.f0.tokenImage;
      allocated.clear();
      n.f3.accept(this);
      isMethod = true;
      numParameters = 0;
      tempCounter = 1;
      n.f4.accept(this);
      if(store == 0){
         if(!methodreturn.equals("")){
            currentClass.mthdType.put(n.f2.f0.tokenImage, methodreturn);
         }
         currentClass.methods.put(n.f2.f0.tokenImage, numParameters + 1);
      }
      if(store == 2){
         Object obj = classes.get(currentClass.name);
         ans += obj.name + "__" + n.f2.f0.tokenImage + " [" + obj.methods.get(n.f2.f0.tokenImage) + "] ";
         ans += "\nBEGIN\n";
      }
      numParameters = 0;
      n.f5.accept(this);
      n.f6.accept(this);
      cnt = 0;
      numVar = 0;
      n.f7.accept(this);
      stmt = "";
      if(store == 2){
         tempCounter = numVar + classes.get(currentClass.name).methods.get(n.f2.f0.tokenImage);
      }
      String temp = stmt;
      stmt = "";
      n.f8.accept(this);
      ans += stmt;
      stmt = temp;
      n.f9.accept(this);
      String ret = n.f10.accept(this);
      String rret = retTemp;
      if(!isIdentifier){
         ans += ret + "\n";
      }
      ans += "RETURN\n" + rret + "\nEND\n";
      n.f11.accept(this);
      n.f12.accept(this);
      if(store == 2){
         addMethod += "\n";
         addMethod += ans;
         return ans;
      }
      isMethod = false;
      return "";
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public String visit(FormalParameterList n) {
      String ans = "\n";
      n.f0.accept(this);
      n.f1.accept(this);
      return ans;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public String visit(FormalParameter n) {
      String ans = "\n";
      classtypeParam = "";
      n.f0.accept(this);
      String tempstr = classtypeParam;
      n.f1.accept(this);
      String r = retTemp;
      if(store == 0 && isMethod){
         currentClass.id_temp.put(currentMethod + "," + n.f1.f0.tokenImage, new_temp());
         numParameters++;
      }
      if(store == 2 && isMethod && !tempstr.equals("")){
         allocated.put(r, tempstr);
      }
      return ans;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public String visit(FormalParameterRest n) {
      String ans = "\n";
      n.f0.accept(this);
      n.f1.accept(this);
      return ans;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public String visit(Type n) {
      String ans = "\n";
      n.f0.accept(this);
      return ans;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public String visit(ArrayType n) {
      String ans = "\n";
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return ans;
   }

   /**
    * f0 -> "boolean"
    */
   public String visit(BooleanType n) {
      String ans = "\n";
      n.f0.accept(this);
      return ans;
   }

   /**
    * f0 -> "int"
    */
   public String visit(IntegerType n) {
      String ans = "\n";
      n.f0.accept(this);
      return ans;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | DoStatement()
    *       | PrintStatement()
    */
   public String visit(Statement n) {
      String ans = "\n";
      stmt += n.f0.accept(this);
      ans = stmt;
      return ans;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public String visit(Block n) {
      String ans = "\n";
      n.f0.accept(this);
      String temp = stmt;
      stmt = "";
      n.f1.accept(this);
      ans = stmt;
      stmt = temp;
      n.f2.accept(this);
      return ans;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public String visit(AssignmentStatement n) {
      String ans = "\n";
      assignment = true;
      n.f0.accept(this);
      assignment = false;
      String command = "";
      if(store == 2 && classes.get(currentClass.name).id_temp.get(currentMethod + "," + n.f0.f0.tokenImage) != null){
         command += "MOVE ";
         command += classes.get(currentClass.name).id_temp.get(currentMethod + "," + n.f0.f0.tokenImage);
      }
      else if(store == 2 && classes.get(currentClass.name).fields.get(n.f0.f0.tokenImage) != null){
         command += "HSTORE ";
         int num = classes.get(currentClass.name).fields.get(n.f0.f0.tokenImage);
         command += "TEMP 0 ";
         command += Integer.toString(num);
      }
      n.f1.accept(this);
      String exp = n.f2.accept(this);
      n.f3.accept(this);
      if(!isIdentifier){ans += exp + "\n";}
      ans += command;
      ans += " ";
      ans += retTemp + "\n";
      return ans;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public String visit(ArrayAssignmentStatement n) {
      String ans = "\n";
      assignment = true;
      n.f0.accept(this);
      assignment = false;
      String r1 = "";
      String s1 = "";
      if(store == 2 && classes.get(currentClass.name).id_temp.get(currentMethod + "," + n.f0.f0.tokenImage) != null){
         r1 = classes.get(currentClass.name).id_temp.get(currentMethod + "," + n.f0.f0.tokenImage);
      }
      else if(store == 2 && classes.get(currentClass.name).fields.get(n.f0.f0.tokenImage) != null){
         String t1 = new_temp();
         s1 += "HLOAD " + t1 + " ";
         int num = classes.get(currentClass.name).fields.get(n.f0.f0.tokenImage);
         s1 += "TEMP 0 ";
         s1 += Integer.toString(num);
         r1 = t1;
      }
      n.f1.accept(this);
      ans += s1 + "\n";
      String s2 = n.f2.accept(this);
      if(!isIdentifier){
         ans += s2 + "\n";
      }
      isIdentifier = false;
      String r2 = retTemp;
      n.f3.accept(this);
      n.f4.accept(this);
      String s3 = n.f5.accept(this);
      if(!isIdentifier){ans += s3 + "\n";}
      isIdentifier = false;
      String r3 = retTemp;
      
      String sttemp = new_temp();
      ans += "MOVE " + sttemp + " " + r1 + "\n";
      String iter = new_temp();
      String compare = new_temp();
      ans += "MOVE " + iter + " 0\n";
      String startLabel = new_Label();
      String endLabel = new_Label();
      String t1 = new_temp();
      String t2 = new_temp();
      ans += startLabel + "\n";
      ans += "MOVE " + compare + " NE " + iter + " " + r2 + "\n";
      ans += "CJUMP " + compare + " " + endLabel + "\n";
      ans += "MOVE " + t1 + " " + sttemp + "\n";
      ans += "MOVE " + sttemp + " PLUS " + t1 + " " + "4\n";
      ans += "MOVE " + t2 + " " + iter + "\n";
      ans += "MOVE " + iter + " PLUS " + t2 + " " + "1\n";
      ans += "JUMP " + startLabel + "\n";
      ans += endLabel + "\n";
      ans += "MOVE " + t1 + " " + sttemp + "\n";
      ans += "MOVE " + sttemp + " PLUS " + t1 + " " + "4\n";
      ans += "HSTORE " + sttemp + " 0 " + r3 + "\n";

      n.f6.accept(this);
      return ans;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public String visit(IfStatement n) {
      String ans = "\n";
      ans += n.f0.accept(this);
      return ans;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public String visit(IfthenStatement n) {
      String ans = "\n";
      String ifLabel = new_Label();
      String nextLabel = new_Label();
      n.f0.accept(this);
      n.f1.accept(this);
      String s1 = n.f2.accept(this);
      String r1 = retTemp;
      if(!isIdentifier){
         ans += s1 + "\n";
      }
      ans += "CJUMP " + r1 + " " + nextLabel + "\n";
      ans += ifLabel + "\n";
      n.f3.accept(this);
      String temp = stmt;
      stmt = "";
      n.f4.accept(this);
      ans += stmt;
      ans += "\n" + nextLabel + "\nNOOP\n";
      stmt = temp;
      return ans;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public String visit(IfthenElseStatement n) {
      String ans = "\n";
      String nextLabel = new_Label();
      String elseLabel = new_Label();
      n.f0.accept(this);
      n.f1.accept(this);
      String s1 = n.f2.accept(this);
      String r1 = retTemp;
      ans += s1 + "\n";
      ans += "CJUMP " + r1 + " " + elseLabel + "\n";
      n.f3.accept(this);
      String temp = stmt;
      stmt = "";
      n.f4.accept(this);
      ans += stmt + "\n";
      ans += "JUMP " + nextLabel + "\n" + elseLabel + "\n";
      stmt = temp;
      n.f5.accept(this);
      stmt = "";
      n.f6.accept(this);
      ans += stmt + "\n";
      stmt = temp;
      ans += nextLabel + "\n" + "NOOP\n";
      return ans;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public String visit(WhileStatement n) {
      String ans = "\n";
      String startLabel = new_Label();
      String nextLabel = new_Label();
      n.f0.accept(this);
      n.f1.accept(this);
      String s1 = n.f2.accept(this);
      String r1 = retTemp;
      ans += startLabel + "\n";
      if(!isIdentifier){
         ans += s1 + "\n";
      }
      ans += "CJUMP " + r1 + " " + nextLabel + "\n";
      n.f3.accept(this);
      String temp = stmt;
      stmt = "";
      n.f4.accept(this);
      ans += stmt + "\n";
      ans += "JUMP " + startLabel + "\n";
      stmt = temp;
      ans += nextLabel + "\nNOOP\n";
      return ans;
   }

   /**
    * f0 -> "do"
    * f1 -> Statement()
    * f2 -> "while"
    * f3 -> "("
    * f4 -> Expression()
    * f5 -> ")"
    * f6 -> ";"
    */
   public String visit(DoStatement n) {
      String ans = "\n";
      String startLabel = new_Label();
      String endLabel = new_Label();
      ans += startLabel + "\nNOOP\n";
      n.f0.accept(this);
      String temp = stmt;
      stmt = "";
      n.f1.accept(this);
      ans += stmt + "\n";
      stmt = temp;
      n.f2.accept(this);
      n.f3.accept(this);
      String s = n.f4.accept(this);
      String r = retTemp;
      n.f5.accept(this);
      n.f6.accept(this);
      ans += s + "\n";
      ans += "CJUMP " + r + " " + endLabel + "\n";
      ans += "JUMP " +  startLabel + "\n";
      ans += endLabel + "\nNOOP\n";
      return ans;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public String visit(PrintStatement n) {
      String ans = "\n";
      n.f0.accept(this);
      n.f1.accept(this);
      String s = n.f2.accept(this);
      String r = retTemp;
      if(!isIdentifier){
         ans += s + "\n";
      }
      n.f3.accept(this);
      n.f4.accept(this);
      ans += "\nPRINT ";
      ans += r + "\n";
      return ans;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | AddExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public String visit(Expression n) {
      String ans = "";
      ans += n.f0.accept(this);
      return ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public String visit(AndExpression n) {
      String ans = "\n";
      String s1 = n.f0.accept(this);
      String r1 = retTemp;
      n.f1.accept(this);
      String s2 = n.f2.accept(this);
      String r2 = retTemp;

      String falseLabel = new_Label();
      String endLabel = new_Label();
      String tt = new_temp();
      ans += s1 + "\n";
      ans += "CJUMP " + r1 + " " + falseLabel + "\n";
      ans += s2 + "\n";
      ans += "CJUMP " + r2 + " " + falseLabel + "\n";
      ans += "MOVE " + tt + " 1\n";
      ans += "JUMP " + endLabel + "\n";
      ans += falseLabel + "\n";
      ans += "MOVE " + tt + " 0\n";
      ans += endLabel + "\nNOOP\n";
      retTemp = tt;
      return ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public String visit(OrExpression n) {
      String ans = "\n";
      String evalsecond = new_Label();
      String trueLabel = new_Label();
      String falseLabel = new_Label();
      String endLabel = new_Label();
      String s1 = n.f0.accept(this);
      String r1 = retTemp;
      n.f1.accept(this);
      String s2 = n.f2.accept(this);
      String r2 = retTemp;

      String tt = new_temp();
      ans += s1 + "\n";
      ans += "CJUMP " + r1 + " " + evalsecond + "\n";
      ans += "JUMP " + trueLabel + "\n";
      ans += evalsecond + "\n";
      ans += s2 + "\n";
      ans += "CJUMP " + r2 + " " + falseLabel + "\n";
      ans += trueLabel + "\n";
      ans += "MOVE " + tt + " 1\n";
      ans += "JUMP " + endLabel + "\n";
      ans += falseLabel + "\n";
      ans += "MOVE " + tt + " 0\n";
      ans += endLabel + "\nNOOP\n";
      retTemp = tt;
      return ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public String visit(CompareExpression n) {
      String ans = "\n";
      String s1 = n.f0.accept(this);
      String r1 = retTemp;
      if(!isIdentifier){
         ans += s1 + "\n";
      }
      isIdentifier = false;
      n.f1.accept(this);
      String s2 = n.f2.accept(this);
      String r2 = retTemp;
      if(!isIdentifier){
         ans += s2 + "\n";
      }
      isIdentifier = false;
      String tt = new_temp();
      ans += "MOVE " + tt + " ";
      ans += "LE ";
      ans += r1 + " " + r2 + "\n";
      retTemp = tt;
      return ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public String visit(neqExpression n) {
      String ans = "\n";
      String s1 = n.f0.accept(this);
      String r1 = retTemp;
      if(!isIdentifier){
         ans += s1 + "\n";
      }
      isIdentifier = false;
      n.f1.accept(this);
      String s2 = n.f2.accept(this);
      String r2 = retTemp;
      if(!isIdentifier){
         ans += s2 + "\n";
      }
      isIdentifier = false;
      String tt = new_temp();
      ans += "MOVE " + tt + " ";
      ans += "NE ";
      ans += r1 + " " + r2 + "\n";
      retTemp = tt;
      return ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public String visit(AddExpression n) {
      String ans = "\n";
      String s1 = n.f0.accept(this);
      String r1 = retTemp;
      if(!isIdentifier){
         ans += s1 + "\n";
      }
      isIdentifier = false;
      n.f1.accept(this);
      String s2 = n.f2.accept(this);
      String r2 = retTemp;
      if(!isIdentifier){
         ans += s2 + "\n";
      }
      isIdentifier = false;
      String tt = new_temp();
      ans += "MOVE " + tt + " ";
      ans += "PLUS ";
      ans += r1 + " " + r2 + "\n";
      retTemp = tt;
      return ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public String visit(MinusExpression n) {
      String ans = "\n";
      String s1 = n.f0.accept(this);
      String r1 = retTemp;
      if(!isIdentifier){
         ans += s1 + "\n";
      }
      isIdentifier = false;
      n.f1.accept(this);
      String s2 = n.f2.accept(this);
      String r2 = retTemp;
      if(!isIdentifier){
         ans += s2 + "\n";
      }
      isIdentifier = false;
      String tt = new_temp();
      ans += "MOVE " + tt + " ";
      ans += "MINUS ";
      ans += r1 + " " + r2 + "\n";
      retTemp = tt;
      return ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public String visit(TimesExpression n) {
      String ans = "\n";
      String s1 = n.f0.accept(this);
      String r1 = retTemp;
      if(!isIdentifier){
         ans += s1 + "\n";
      }
      isIdentifier = false;
      n.f1.accept(this);
      String s2 = n.f2.accept(this);
      String r2 = retTemp;
      if(!isIdentifier){
         ans += s2 + "\n";
      }
      isIdentifier = false;
      String tt = new_temp();
      ans += "MOVE " + tt + " ";
      ans += "TIMES ";
      ans += r1 + " " + r2 + "\n";
      retTemp = tt;
      return ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public String visit(DivExpression n) {
      String ans = "\n";
      String s1 = n.f0.accept(this);
      String r1 = retTemp;
      if(!isIdentifier){
         ans += s1 + "\n";
      }
      isIdentifier = false;
      n.f1.accept(this);
      String s2 = n.f2.accept(this);
      String r2 = retTemp;
      if(!isIdentifier){
         ans += s2 + "\n";
      }
      isIdentifier = false;
      String tt = new_temp();
      ans += "MOVE " + tt + " ";
      ans += "DIV ";
      ans += r1 + " " + r2 + "\n";
      retTemp = tt;
      return ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public String visit(ArrayLookup n) {
      String ans = "\n";
      String s1 = n.f0.accept(this);
      if(!isIdentifier){
         ans += s1 + "\n";
      }
      isIdentifier = false;
      String r1 = retTemp;
      String sttemp = new_temp();
      ans += "MOVE " + sttemp + " " + r1 + "\n";
      n.f1.accept(this);
      String s2 = n.f2.accept(this);
      if(!isIdentifier){
         ans += s2 + "\n";
      }
      isIdentifier = false;
      String r2 = retTemp;

      String iter = new_temp();
      String compare = new_temp();
      ans += "MOVE " + iter + " 0\n";
      String startLabel = new_Label();
      String endLabel = new_Label();
      String t1 = new_temp();
      String t2 = new_temp();
      ans += startLabel + "\n";
      ans += "MOVE " + compare + " NE " + iter + " " + r2 + "\n";
      ans += "CJUMP " + compare + " " + endLabel + "\n";
      ans += "MOVE " + t1 + " " + sttemp + "\n";
      ans += "MOVE " + sttemp + " PLUS " + t1 + " " + "4\n";
      ans += "MOVE " + t2 + " " + iter + "\n";
      ans += "MOVE " + iter + " PLUS " + t2 + " " + "1\n";
      ans += "JUMP " + startLabel + "\n";
      ans += endLabel + "\n";
      ans += "MOVE " + t1 + " " + sttemp + "\n";
      ans += "MOVE " + sttemp + " PLUS " + t1 + " " + "4\n";
      String tt = new_temp();
      ans += "HLOAD " + tt + " " + sttemp + " 0\n";
      retTemp = tt;

      n.f3.accept(this);
      return ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public String visit(ArrayLength n) {
      String ans = "\n";
      String s1 = n.f0.accept(this);
      if(!isIdentifier){
         ans += s1 + "\n";
      }
      isIdentifier = false;
      String r1 = retTemp;
      n.f1.accept(this);
      n.f2.accept(this);

      String t1 = new_temp();
      String t2 = new_temp();
      ans += "HLOAD " + t1 + " " + r1 + " 0\n";
      ans += "MOVE " + t2 + " " + t1 + "\n";
      retTemp = t2; 
      return ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public String visit(MessageSend n) {
      String ans = "\n";
      String s1 = n.f0.accept(this);
      String r1 = retTemp;
      if(!isIdentifier){
         ans += s1 + "\n";
      }
      String s = workingClass;
      if(store == 2 && allocated.get(r1) != null){
         s = allocated.get(r1);
      }
      if(classes.get(s) == null){
         ans += "ERROR\n";
      }
      String ptr1 = new_temp();
      String ptr2 = new_temp();
      ans += "HLOAD " + ptr1 + " " + r1 + " 0\n";
      ans += "HLOAD " + ptr2 + " " + ptr1 + " ";
      int count = 0;
      if(store == 2){
         boolean present = false;
         for(String k : classes.get(s).methods.keySet()){
            if(k.equals(n.f2.f0.tokenImage)){
               ans += Integer.toString(count);
               present = true;
               break;
            }
            count+=4;
         }
         if(!present){
            ans += "ERROR\n";
         }
      }
      ans += "\n";
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      String temp = explist;
      String temp1 = funcall;
      explist = "";
      funcall = "";
      n.f4.accept(this);
      ans += explist + "\n";
      explist = temp;
      n.f5.accept(this);
      String tt = new_temp();
      ans += "MOVE " + tt + " ";
      ans += "CALL " + ptr2 + " " + "( " + r1 + " " + funcall + ")\n";
      retTemp = tt;
      funcall = temp1;
      if(store == 2 && classes.get(s).mthdType.get(n.f2.f0.tokenImage) != null){
         allocated.put(tt, classes.get(s).mthdType.get(n.f2.f0.tokenImage));
      }
      return ans;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public String visit(ExpressionList n) {
      String ans = "\n";
      String s = n.f0.accept(this);
      if(!isIdentifier){
         explist += s;
      }
      funcall += retTemp + " ";
      explist += "\n";
      n.f1.accept(this);
      return ans;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public String visit(ExpressionRest n) {
      String ans = "\n";
      n.f0.accept(this);
      String s = n.f1.accept(this);
      if(!isIdentifier){
         explist += s;
      }
      funcall += retTemp + " ";
      explist += "\n";
      return ans;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public String visit(PrimaryExpression n) {
      String ans = "";
      ans += n.f0.accept(this);
      return ans;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public String visit(IntegerLiteral n) {
      String ans = "";
      n.f0.accept(this);
      ans += n.f0.tokenImage;
      String tt = new_temp();
      ans = "MOVE " + tt + " " + ans + "\n";
      retTemp = tt;
      return ans;
   }

   /**
    * f0 -> "true"
    */
   public String visit(TrueLiteral n) {
      String ans = "\n";
      n.f0.accept(this);
      String tt = new_temp();
      ans = "MOVE " + tt + " " + "1" + "\n";
      retTemp = tt;
      return ans;
   }

   /**
    * f0 -> "false"
    */
   public String visit(FalseLiteral n) {
      String ans = "\n";
      n.f0.accept(this);
      String tt = new_temp();
      ans = "MOVE " + tt + " " + "0" + "\n";
      retTemp = tt;
      return ans;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public String visit(Identifier n) {
      String ans = "\n";
      if(store == 2 && isMethod && !assignment){
         if(classes.get(currentClass.name).id_temp.get(currentMethod + "," + n.f0.tokenImage) != null){
            ans = classes.get(currentClass.name).id_temp.get(currentMethod + "," + n.f0.tokenImage);
            retTemp = ans;
            ans = "";
         }
         else if(classes.get(currentClass.name).fields.get(n.f0.tokenImage) != null){
            int num = classes.get(currentClass.name).fields.get(n.f0.tokenImage);
            ans = "TEMP 0 ";
            ans += Integer.toString(num);
            String tt = new_temp();
            ans = "HLOAD " + tt + " " + ans + "\n";
            retTemp = tt;
            isIdentifier = false;
         }
         workingClass = allocated.get(retTemp);
         if(allocated.get(retTemp) == null){
            workingClass = classes.get(currentClass.name).fieldType.get(n.f0.tokenImage);
         }
      }
      classtypeParam = n.f0.tokenImage;
      n.f0.accept(this);
      return ans;

   }

   /**
    * f0 -> "this"
    */
   public String visit(ThisExpression n) {
      String ans = "\n";
      n.f0.accept(this);
      workingClass = currentClass.name;
      retTemp = "TEMP 0";
      return ans;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public String visit(ArrayAllocationExpression n) {
      String ans = "\n";
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      isIdentifier = false;
      String s = n.f3.accept(this);
      String r = retTemp;
      if(!isIdentifier){
         ans += s + "\n";
      }
      String t1 = new_temp();
      String t2 = new_temp();
      ans += "MOVE " + t1 + " PLUS " + r + " 1\n";
      ans += "MOVE " + t2 + " TIMES " + t1 + " 4\n";
      String ptr1 = new_temp();
      ans += "MOVE " + ptr1 + " HALLOCATE " + t2 + "\n";
      ans += "HSTORE " + ptr1 + " 0 " + r + "\n";
      String tt = new_temp();
      ans += "MOVE " + tt + " " + ptr1 + "\n";
      retTemp = tt;

      String iter = new_temp();
      String compare = new_temp();
      ans += "MOVE " + iter + " 0\n";
      String startLabel = new_Label();
      String endLabel = new_Label();
      String tt1 = new_temp();
      String tt2 = new_temp();
      String t3 = new_temp();
      ans += startLabel + "\n";
      ans += "MOVE " + compare + " NE " + iter + " " + r + "\n";
      ans += "CJUMP " + compare + " " + endLabel + "\n";
      ans += "MOVE " + tt1 + " " + ptr1 + "\n";
      ans += "MOVE " + ptr1 + " PLUS " + tt1 + " " + "4\n";
      ans += "MOVE " + t3 + " 0\n";
      ans += "HSTORE " + ptr1 + " 0 " + t3 + "\n";
      ans += "MOVE " + tt2 + " " + iter + "\n";
      ans += "MOVE " + iter + " PLUS " + tt2 + " " + "1\n";
      ans += "JUMP " + startLabel + "\n";
      ans += endLabel + "\n";
      ans += "NOOP\n";

      n.f4.accept(this);
      return ans;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public String visit(AllocationExpression n) {
      String ans = "\n";
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      if(store == 2){
         String ptr1 = new_temp();
         String ptr2 = new_temp();
         String size1 = new_temp();
         String size2 = new_temp();
         ans += "MOVE " + size1 + " " + Integer.toString(classes.get(n.f1.f0.tokenImage).methods.size()*4) + "\n";
         ans += "MOVE " + size2 + " " + Integer.toString(classes.get(n.f1.f0.tokenImage).fields.size()*4 + 4) + "\n";
         ans += "MOVE " + ptr1 + " HALLOCATE " + size2 + "\n";
         ans += "MOVE " + ptr2 + " HALLOCATE " + size1 + "\n";
         int count = 0;
         for(String k : classes.get(n.f1.f0.tokenImage).methods.keySet()){
            String t1 = new_temp();
            String cname = n.f1.f0.tokenImage;
            if(classes.get(cname).fromparmeth.get(k) != null){
               cname = classes.get(cname).fromparmeth.get(k);
            }
            ans += "MOVE " + t1 + " " + cname + "__" + k + "\n";
            ans += "HSTORE " + ptr2 + " " + Integer.toString(count) + " " + t1 + "\n";
            count+=4;
         }
         ans += "HSTORE " + ptr1 + " 0 " + ptr2 + "\n";
         String tt = new_temp();
         ans += "MOVE " + tt + " " + ptr1 + "\n";
         workingClass = n.f1.f0.tokenImage;

         String iter = new_temp();
         String compare = new_temp();
         ans += "MOVE " + iter + " 4\n";
         String startLabel = new_Label();
         String endLabel = new_Label();
         String t1 = new_temp();
         String t2 = new_temp();
         String t3 = new_temp();
         ans += startLabel + "\n";
         ans += "MOVE " + compare + " NE " + iter + " " + size2 + "\n";
         ans += "CJUMP " + compare + " " + endLabel + "\n";
         ans += "MOVE " + t1 + " " + ptr1 + "\n";
         ans += "MOVE " + ptr1 + " PLUS " + t1 + " " + "4\n";
         ans += "MOVE " + t3 + " 0\n";
         ans += "HSTORE " + ptr1 + " 0 " + t3 + "\n";
         ans += "MOVE " + t2 + " " + iter + "\n";
         ans += "MOVE " + iter + " PLUS " + t2 + " " + "4\n";
         ans += "JUMP " + startLabel + "\n";
         ans += endLabel + "\n";
         ans += "NOOP\n";

         retTemp = tt;
      }
      return ans;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public String visit(NotExpression n) {
      String ans = "\n";
      n.f0.accept(this);
      String s = n.f1.accept(this);
      String r = retTemp;
      ans += s + "\n";
      String t = new_temp();
      String tt = new_temp();
      ans += "MOVE " + t + " " + " 1" + "\n";
      ans += "MOVE " + tt + " MINUS " + t + " " + r + "\n";
      retTemp = tt;
      return ans;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public String visit(BracketExpression n) {
      String ans = "";
      n.f0.accept(this);
      ans += n.f1.accept(this);
      n.f2.accept(this);
      return ans;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public String visit(IdentifierList n) {
      String ans = "\n";
      n.f0.accept(this);
      n.f1.accept(this);
      return ans;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public String visit(IdentifierRest n) {
      String ans = "\n";
      n.f0.accept(this);
      n.f1.accept(this);
      return ans;
   }

}
