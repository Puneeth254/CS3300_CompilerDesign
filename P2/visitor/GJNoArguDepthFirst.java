//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJNoArguDepthFirst<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   boolean store = false;
   boolean debug = false;
   String Cname;
   String Mname;
   String Tname;
   boolean isnew = false;
   boolean methodCall = false;
   int thisType;
   String checkClass;
   int isMethod;
   int isIdentifierType;
   int isExpression;
   int isInteger;
   int isdot;
   int isBool;
   int tobeAdded;
   int bracket;
   boolean inargu;
   String exp;
   String expType;
   String variable;
   String main;
   String param = "";
   String checkParam = "";
   Map<String, String> mp = new HashMap<>();
   Map<String, String> mp1 = new HashMap<>();
   Map<String, String> returnType = new HashMap<>();
   Map<String, String> paramType = new HashMap<>();
   Map<String, String> derive = new HashMap<>();
   Map<String, String> classes = new HashMap<>();
   Map<String, String> parent  = new HashMap<>();

   public boolean compare(String s1, String s2){
      //System.out.println(s1 + " :: " + s2);
      String[] arr1 = s1.split(",");
      String[] arr2 = s2.split(",");
      
      if(arr1.length != arr2.length){
         return false;
      }
      for(int i = 0; i < arr1.length; i++){
         boolean flag = false;
         String t1 = arr1[i];
         String t2 = arr2[i];
         //System.out.println(t1 + " " + t2 + parent.get(t2));
         while(!flag){
            if(t1.equals(t2)){
               flag = true;
            }

            if(parent.get(t2) == null){
               break;
            }
            t2 = parent.get(t2);
            //System.out.println(t1 + " " + t2);
         }

         if(!flag){
            return false;
         }
      }
      return true;
   }

   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      store = true;
      // for(Map.Entry<String, String>i : paramType.entrySet()){
      //    System.out.println(i.getKey() + " : " + i.getValue());
      // }
      //System.out.println("\nAGAIN\n");
      //System.out.println(returnType);
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);

      System.out.println("Program type checked successfully");
      // for(Map.Entry<String, String>i : mp.entrySet()){
      //    System.out.println(i.getKey() + " : " + i.getValue());
      // }
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      //System.out.println("Mainclass: " + n.f1.f0.tokenImage);
      if(!store){main = n.f1.f0.tokenImage; classes.put(n.f1.f0.tokenImage, n.f1.f0.tokenImage);}
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      n.f12.accept(this);
      n.f13.accept(this);
      n.f14.accept(this);
      n.f15.accept(this);
      n.f16.accept(this);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      String C = n.f1.f0.tokenImage;
      //System.out.println("Class: " + C);
      Cname = C;
      if(!store){
         if(classes.get(Cname) != null){
            if(debug){System.out.println("Class redeclared");}
            System.out.println("Type error");
            System.exit(0);
         }
         else{
            classes.put(Cname, Cname);
         }
      }
      isMethod = 0;
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n) {
      R _ret=null;
      if(!store){
         if(n.f3.f0.tokenImage.equals(n.f1.f0.tokenImage)){
            if(debug){System.out.println("Extended the sameclass");}
            System.out.println("Type error");
            System.exit(0);
         }
         parent.put(n.f1.f0.tokenImage, n.f3.f0.tokenImage);
         if(classes.get(n.f1.f0.tokenImage) != null){
            if(debug){System.out.println("Class redeclared");}
            System.out.println("Type error");
            System.exit(0);
         }
         else{
            classes.put(n.f1.f0.tokenImage, n.f1.f0.tokenImage);
         }
         if(derive.get(n.f3.f0.tokenImage) == null){
            derive.put(n.f1.f0.tokenImage, n.f3.f0.tokenImage);
         }
         else{
            if(derive.get(n.f3.f0.tokenImage).equals(n.f1.f0.tokenImage)){
               if(debug){System.out.println("Error cyclic inheritance");}
               System.out.println("Type error");
               System.exit(0);
            }
            derive.put(n.f1.f0.tokenImage, derive.get(n.f3.f0.tokenImage));
         }
      }
      if(store){
         if(classes.get(n.f3.f0.tokenImage) == null){
            if(debug){System.out.println("Super class not found");}
            System.out.println("Symbol not found");
            System.exit(0);
         }
         if(n.f3.f0.tokenImage.equals(main)){
            if(debug){System.out.println("Extended the mainclass");}
            System.out.println("Type error");
            System.exit(0);
         }
      }

      // for(Map.Entry<String, String>i : mp.entrySet()){
      //    System.out.println(i.getKey() + " : " + i.getValue());
      // }
      n.f0.accept(this);
      n.f1.accept(this);
      //System.out.println("Class: " + n.f1.f0.tokenImage);
      String C = n.f1.f0.tokenImage;
      Cname = C;
      isMethod = 0;
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      if(!store){
         if(isMethod == 1){
            if(mp.get(Cname + "." + Mname + "." + n.f1.f0.tokenImage) != null || mp.get(Cname + "." + Mname + ".formal." + n.f1.f0.tokenImage) != null){
               if(debug){System.out.println("Reclared variable : " + n.f1.f0.tokenImage);}
               System.out.println("Type error");
               System.exit(0);
            }
            mp.put(Cname + "." + Mname + "." + n.f1.f0.tokenImage, Tname);
         }
         else{
            if(mp.get(Cname + "." + n.f1.f0.tokenImage) != null){
               if(debug){System.out.println("Reclared variable : " + n.f1.f0.tokenImage);}
               System.out.println("Type error");
               System.exit(0);
            }
            mp.put(Cname + "." + n.f1.f0.tokenImage, Tname);
         }
      }
         //System.out.println(Cname + "." + Mname + "." + n.f1.f0.tokenImage + " : " + Tname);
      // else
      //    System.out.println(Cname + "." + n.f1.f0.tokenImage + " : " + Tname);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      String returnT = Tname;
      
      n.f2.accept(this);
      
      Mname = n.f2.f0.tokenImage;
      if(!store){
         if(returnType.get(Cname + "." + Mname) != null){
            if(debug){System.out.println("Method redeclaration");}
            System.out.println("Type error");
            System.exit(0);
         }
         returnType.put(Cname + "." + Mname, returnT);
      }
      isMethod = 1;
      n.f3.accept(this);
      param = "";
      n.f4.accept(this);
      if(!store){
         paramType.put(Cname + "." + Mname, param);
      }
      String pp = Cname;
      while(parent.get(pp) != null){
         pp = parent.get(pp);
         if(paramType.get(pp + "." + Mname) != null){
            if(store && !param.equals(paramType.get(pp + "." + Mname))){
               if(debug){System.out.println("Overloading parameters");}
               System.out.println("Type error");
               System.exit(0);
            }
         }
      }

      pp = Cname;
      while(parent.get(pp) != null){
         pp = parent.get(pp);
         if(returnType.get(pp + "." + Mname) != null){
            if(store && !compare(returnType.get(pp + "." + Mname), returnT)){
               if(debug){System.out.println("Overloading return type");}
               System.out.println("Type error");
               System.exit(0);
            }
         }
      }

      param = "";

      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      isExpression = 1;
      n.f10.accept(this);

      if(store && !compare(returnT, expType)){
         if(debug){System.out.println("Return type doesn't match for Method: " + Mname+" in class: "+ Cname + " : " + returnT + " " + expType);}
         System.out.println("Type error");
         System.exit(0);
      }

      isExpression = 0;
      isInteger = 0;
      isBool = 0;
      n.f11.accept(this);
      n.f12.accept(this);

      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      if(!store){
         if(mp.get(Cname + "." + Mname + "." + n.f1.f0.tokenImage) != null || mp.get(Cname + "." + Mname + ".formal." + n.f1.f0.tokenImage) != null){
            if(debug){System.out.println("Reclared variable : " + n.f1.f0.tokenImage);}
            System.out.println("Type error");
            System.exit(0);
         }
         mp.put(Cname + "." + Mname + ".formal." + n.f1.f0.tokenImage, Tname);
      }
      
      param = param + Tname + ",";
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n) {
      R _ret=null;
      isIdentifierType = 1;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);

      Tname = "array";
      isIdentifierType = 0;
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n) {
      R _ret=null;
      n.f0.accept(this);
      Tname = "bool";
      isIdentifierType = 0;
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n) {
      R _ret=null;
      n.f0.accept(this);
      Tname = "int";
      isIdentifierType = 0;
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | DoStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n) {
      R _ret=null;
      String idType = "None";
      if(store){

         boolean flag = false;
         String name = Cname;

         if(mp.get(name+"."+Mname+"."+n.f0.f0.tokenImage) != null){
            idType = mp.get(name+"."+Mname+"."+n.f0.f0.tokenImage);
            flag = true;
         }
         else if(mp.get(name+"."+Mname+".formal."+n.f0.f0.tokenImage) != null){
            flag = true;
            idType = mp.get(name+"."+Mname+".formal."+n.f0.f0.tokenImage);
         }

         while(!flag){
            if(mp.get(name+"."+n.f0.f0.tokenImage) != null){
               idType = mp.get(name+"."+n.f0.f0.tokenImage);
               flag = true;
            }
           
            if(parent.get(name) == null){
               break;
            }
            name = parent.get(name);
         }

         // if(classes.get(n.f0.f0.tokenImage) != null){
         //    idType = n.f0.f0.tokenImage;
         //    flag = true;
         // }

         if(!flag){
            if(debug){System.out.println(n.f0.f0.tokenImage + " : Symbol not found");}
            System.out.println("Symbol not found");
            System.exit(0);
         }
      }
      n.f0.accept(this);
      n.f1.accept(this);
      isExpression = 1;
      n.f2.accept(this);
      isExpression = 0;
      
      if(store && !compare(idType, expType)){
         if(debug){System.out.println(idType + " " + expType + " Type Error in Assignment");}
            System.out.println("Type error");
            System.exit(0);
      }
   
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n) {
      R _ret=null;
      String idType = "None";
      if(store){
         boolean flag = false;
         String name = Cname;

         if(mp.get(name+"."+Mname+"."+n.f0.f0.tokenImage) != null){
            idType = mp.get(name+"."+Mname+"."+n.f0.f0.tokenImage);
            flag = true;
         }
         else if(mp.get(name+"."+Mname+".formal."+n.f0.f0.tokenImage) != null){
            flag = true;
            idType = mp.get(name+"."+Mname+".formal."+n.f0.f0.tokenImage);
         }

         while(!flag){
            if(mp.get(name+"."+n.f0.f0.tokenImage) != null){
               idType = mp.get(name+"."+n.f0.f0.tokenImage);
               flag = true;
            }
           
            if(parent.get(name) == null){
               break;
            }
            name = parent.get(name);
         }

         // if(classes.get(n.f0.f0.tokenImage) != null){
         //    idType = n.f0.f0.tokenImage;
         //    flag = true;
         // }

         if(!flag){
            if(debug){System.out.println(n.f0.f0.tokenImage + " : Symbol not found");}
            System.out.println("Symbol not found");
            System.exit(0);
         }
      }
      n.f0.accept(this);
      n.f1.accept(this);
      isExpression = 1;
      n.f2.accept(this);
      isExpression = 0;
      String type1 = expType;
      n.f3.accept(this);
      n.f4.accept(this);
      isExpression = 1;
      n.f5.accept(this);
      isExpression = 0;
      if(store && (!idType.equals("array") || !type1.equals("int") || !expType.equals("int"))){
         if(debug){System.out.println("Error at ArrayAllocation");}
         System.out.println("Type error");
         System.exit(0);
      }
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      isExpression = 1;
      n.f2.accept(this);
      isExpression = 0;
      if(!expType.equals("bool") && store){
         if(debug){System.out.println("Type error at if");}
         System.out.println("Type error");
         System.exit(0);
      }
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n) {
      R _ret=null;
      //System.out.println(expType);
      n.f0.accept(this);
      n.f1.accept(this);
      isExpression = 1;
      n.f2.accept(this);
      isExpression = 0;
      if(!expType.equals("bool") && store){
         if(debug){System.out.println("Type error at ifelse " +expType);}
         System.out.println("Type error");
         System.exit(0);
      }
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      isExpression = 1;
      n.f2.accept(this);
      isExpression = 0;
      if(!expType.equals("bool") && store){
         if(debug){System.out.println("Type error at if");}
         System.out.println("Type error");
         System.exit(0);
      }
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> "do"
    * f1 -> Statement()
    * f2 -> "while"
    * f3 -> "("
    * f4 -> Expression()
    * f5 -> ")"
    * f6 -> ";"
    */
   public R visit(DoStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      isExpression = 1;
      n.f4.accept(this);
      isExpression = 0;
      if(!expType.equals("bool") && store){
         if(debug){System.out.println("Type error at if");}
         System.out.println("Type error");
         System.exit(0);
      }
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      isExpression = 1;
      n.f2.accept(this);
      isExpression = 0;
      if(!expType.equals("int") && store){
         if(debug){System.out.println("Error at PrintStatement");}
         System.out.println("Type error");
         System.exit(0);
      }
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | AddExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n) {
      R _ret=null;
      isExpression = 1;
      String Tname1, Tname2;
      n.f0.accept(this);
      Tname1 = expType;
      n.f1.accept(this);
      n.f2.accept(this);
      Tname2 = expType;
      if((!Tname1.equals("bool") || !Tname2.equals("bool")) && store){
         if(debug){System.out.println("Type Error at AND");}
         System.out.println("Type error");
         System.exit(0);
      }
      isExpression = 0;
      expType = "bool";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n) {
      R _ret=null;
      String Tname1, Tname2;
      n.f0.accept(this);
      Tname1 = expType;
      n.f1.accept(this);
      n.f2.accept(this);
      Tname2 = expType;
      if((!Tname1.equals("bool") || !Tname2.equals("bool")) && store){
         if(debug){System.out.println("Type Error at OR");}
         System.out.println("Type error");
         System.exit(0);
      }
      expType = "bool";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n) {
      R _ret=null;
      String Tname1, Tname2;
      n.f0.accept(this);
      Tname1 = expType;
      n.f1.accept(this);
      n.f2.accept(this);
      Tname2 = expType;
      if((!(Tname1.equals("int") && Tname2.equals("int"))) && store){
            if(debug){System.out.println("Error at <=");}
            System.out.println("Type error");
            System.exit(0);
      }
      expType = "bool";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n) {
      R _ret=null;
      String Tname1, Tname2;
      n.f0.accept(this);
      Tname1 = expType;
      n.f1.accept(this);
      n.f2.accept(this);
      Tname2 = expType;
      if(store && !compare(Tname1, Tname2) && !compare(Tname2, Tname1)){
         if(debug){System.out.println(Tname1 + " " + Tname2 + " Error at !=");}
         System.out.println("Type error");
         System.exit(0);
      }
      expType = "bool";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(AddExpression n) {
      R _ret=null;
      String Tname1, Tname2;
      n.f0.accept(this);
      Tname1 = expType;
      n.f1.accept(this);
      n.f2.accept(this);
      Tname2 = expType;
      if(!(Tname1.equals("int") && Tname2.equals("int")) && store){
            if(debug){System.out.println("Error at +");}
            System.out.println("Type error");
            System.exit(0);
      }
      //System.out.println("Heeeee");
      expType = "int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n) {
      R _ret=null;
      String Tname1, Tname2;
      n.f0.accept(this);
      Tname1 = expType;
      n.f1.accept(this);
      n.f2.accept(this);
      Tname2 = expType;
      if(!(Tname1.equals("int") && Tname2.equals("int")) && store){
            if(debug){System.out.println("Error at -");}
            System.out.println("Type error");
            System.exit(0);
      }
      expType = "int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n) {
      R _ret=null;
      String Tname1, Tname2;
      n.f0.accept(this);
      Tname1 = expType;
      n.f1.accept(this);
      n.f2.accept(this);
      Tname2 = expType;
      if(!(Tname1.equals("int") && Tname2.equals("int")) && store){
            if(debug){System.out.println("Error at *");}
            System.out.println("Type error");
            System.exit(0);
      }
      expType = "int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n) {
      R _ret=null;
      String Tname1, Tname2;
      n.f0.accept(this);
      Tname1 = expType;
      n.f1.accept(this);
      n.f2.accept(this);
      Tname2 = expType;
      if(!(Tname1.equals("int") && Tname2.equals("int")) && store){
            if(debug){System.out.println("Error at /");}
            System.out.println("Type error");
            System.exit(0);
      }
      expType = "int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n) {
      R _ret=null;
      isdot = 1;
      n.f0.accept(this);
      isdot = 0;
      String type1 = expType;
      n.f1.accept(this);
      isdot = 1;
      n.f2.accept(this);
      isdot = 0;
      n.f3.accept(this);
      if(store && (!type1.equals("array") || !expType.equals("int"))){
         if(debug){System.out.println("Error at arraylookup");}
         System.out.println("Type error");
         System.exit(0);
      }
      expType = "int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n) {
      R _ret=null;
      n.f0.accept(this);
      if(!expType.equals("array") && store){
         if(debug){System.out.println("Error at .length");}
         System.out.println("Type error");
         System.exit(0);
      }
      n.f1.accept(this);
      n.f2.accept(this);
      expType = "int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n) {
      R _ret=null;
      n.f0.accept(this);
      String check = expType;
      n.f1.accept(this);
      methodCall = true;
      n.f2.accept(this);
      methodCall = false;
      
      n.f3.accept(this);
      
      String temp = checkParam;
      checkParam = "";
      inargu = true;
      n.f4.accept(this);
      n.f5.accept(this);
     
      while(returnType.get(check + "." + n.f2.f0.tokenImage) == null){
         if(parent.get(check) == null){
            break;
         }
         check = parent.get(check);
      }

      if(debug){System.out.println(check + "." + n.f2.f0.tokenImage + " : " + checkParam + " -> " + returnType.get(check + "." + n.f2.f0.tokenImage));}


      if(returnType.get(check + "." + n.f2.f0.tokenImage) != null){
         if(store && !compare(paramType.get(check + "." + n.f2.f0.tokenImage), checkParam)){
            if(debug){System.out.println("Parameters doesn't match");}
            System.out.println("Type error");
            System.exit(0);
         }
         expType = returnType.get(check + "." + n.f2.f0.tokenImage);

         if(debug){System.out.println(expType);}
      }
      else{
         if(store){
            if(debug){System.out.println("Error at .");}
            System.out.println("Symbol not found");
            System.exit(0);
         }
      }
      checkParam = temp;
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n) {
      R _ret=null;
      n.f0.accept(this);
      checkParam = checkParam + expType + ",";
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      checkParam = checkParam + expType + ",";
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      expType = "int";
      isInteger = 1;
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n) {
      R _ret=null;
      expType = "bool";
      isBool = 1;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n) {
      R _ret=null;
      expType = "bool";
      isBool = 1;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n) {
      R _ret=null;
      n.f0.accept(this);
      if(isIdentifierType == 1){
         Tname = n.f0.tokenImage;
         if(store && classes.get(Tname) == null){
            if(debug){System.out.println("No identifier type");}
            System.out.println("Symbol not found");
            System.exit(0);
         }
         expType = Tname;
      }
      if(isExpression == 1 && !isnew && !methodCall){

         boolean flag = false;
         String name = Cname;

         if(mp.get(name+"."+Mname+"."+n.f0.tokenImage) != null){
            expType = mp.get(name+"."+Mname+"."+n.f0.tokenImage);
            flag = true;
         }
         else if(mp.get(name+"."+Mname+".formal."+n.f0.tokenImage) != null){
            flag = true;
            expType = mp.get(name+"."+Mname+".formal."+n.f0.tokenImage);
         }

         while(!flag){
            if(mp.get(name+"."+n.f0.tokenImage) != null){
               expType = mp.get(name+"."+n.f0.tokenImage);
               flag = true;
            }
           
            if(parent.get(name) == null){
               break;
            }
            name = parent.get(name);
         }

         // if(classes.get(n.f0.tokenImage) != null){
         //    expType = n.f0.tokenImage;
         //    flag = true;
         // }

         if(!flag && store){
            if(debug){System.out.println(n.f0.tokenImage + " : Symbol not found");}
            System.out.println("Symbol not found");
            System.exit(0);
         }
      }
      isIdentifierType = 0;
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n) {
      R _ret=null;
      n.f0.accept(this);
      checkClass = Cname;
      expType = checkClass;
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      if(store && !expType.equals("int")){
         if(debug){System.out.println("Error at ArrayAllocation");}
         System.out.println("Type error");
         System.exit(0);
      }
      n.f4.accept(this);
      expType = "array";
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n) {
      R _ret=null;
      n.f0.accept(this);
      isnew = true;
      n.f1.accept(this);
      if(classes.get(n.f1.f0.tokenImage) == null && store){
         if(debug){System.out.println("Error at new");}
         System.out.println("Type error");
         System.exit(0);
      }
      checkClass = n.f1.f0.tokenImage;
      isnew = false;
      n.f2.accept(this);
      n.f3.accept(this);
      expType = n.f1.f0.tokenImage;
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      if(store && !expType.equals("bool")){
         if(debug){System.out.println("Error at NotExpression");}
         System.out.println("Type error");
         System.exit(0);
      }
      expType = "bool";
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n) {
      R _ret=null;
      n.f0.accept(this);
      bracket = 1;
      n.f1.accept(this);
      bracket = 0;
      n.f2.accept(this);
      //System.out.println(type1);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

}