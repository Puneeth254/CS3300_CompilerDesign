//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;


class Methods{
   String name;
   Methods(String name){
      this.name = name;
   }
}
/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class mipsgen extends GJNoArguDepthFirst<String> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

   Map<Integer, Integer> spilled = new HashMap<>();
   Map<Integer, Integer> passarg = new HashMap<>();
   int spillCount = 2;
   int passargCount = 2;
   Map<String, Methods> methods = new HashMap<>();
   Methods current_method = null;

   String procedure = "";
   String stmtlst = "";
   String reg = "";
   String operator = "";

   boolean fromIntegerLiteral = false;
   boolean fromOperator = false;
   boolean notLabel = false;
   boolean fromLabel = false;

   int spilledNumber;

   public String visit(NodeList n) {
      String ans = "";
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return ans;
   }

   public String visit(NodeListOptional n) {
      if ( n.present() ) {
         String ans = "";
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return ans;
      }
      else
         return null;
   }

   public String visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public String visit(NodeSequence n) {
      String ans = "";
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return ans;
   }

   public String visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    * f13 -> ( Procedure() )*
    * f14 -> <EOF>
    */
   public String visit(Goal n) {
      String ans = "";
      ans += "\t.text\n";
      ans += "\t.globl main\nmain:\n";
      ans += "\tsw $fp, 0($sp)\n\tsw $ra, -4($sp)\n\tmove $fp, $sp\n\tsubu $sp, $sp, " + (Integer.parseInt(n.f5.f0.tokenImage) + 2) * 4 + "\n";
      Methods new_method = new Methods("main");
      current_method = new_method;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      ans += stmtlst;
      ans += "\tlw $ra, -4($fp)\n\tlw $fp, 0($fp)\n\taddu $sp, $sp, " + (Integer.parseInt(n.f5.f0.tokenImage) + 2) * 4 + "\n\tjr $ra\n\n";
      n.f11.accept(this);
      n.f12.accept(this);
      n.f13.accept(this);
      ans += procedure;
      n.f14.accept(this);
      ans += "\t.data\n";
      ans += "\t.align 0\n";
      ans += "newline:\t.asciiz \"\\n\"\n";
      System.out.println(ans);
      return ans;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public String visit(StmtList n) {
      String ans = "";
      n.f0.accept(this);
      return ans;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    */
   public String visit(Procedure n) {
      String ans = "";
      ans += "\t.text\n";
      ans += "\t.globl " + n.f0.f0.tokenImage + "\n";
      ans += n.f0.f0.tokenImage + ":\n";
      ans += "\tsw $fp, 0($sp)\n\tsw $ra, -4($sp)\n\tmove $fp, $sp\n\tsubu $sp, $sp, " + (Integer.parseInt(n.f5.f0.tokenImage) + 2) * 4 + "\n";
      Methods new_method = new Methods(n.f0.f0.tokenImage);
      current_method = new_method;
      notLabel = true;
      n.f0.accept(this);
      notLabel = false;
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      String temp = stmtlst;
      stmtlst = "";
      n.f10.accept(this);
      ans += stmtlst;
      stmtlst = temp;
      n.f11.accept(this);
      n.f12.accept(this);
      ans += "\tlw $ra, -4($fp)\n\tlw $fp, 0($fp)\n\taddu $sp, $sp, " + (Integer.parseInt(n.f5.f0.tokenImage) + 2) * 4 + "\n\tjr $ra\n\n";
      procedure += ans;
      return ans;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public String visit(Stmt n) {
      String ans = "";
      stmtlst += n.f0.accept(this);
      return ans;
   }

   /**
    * f0 -> "NOOP"
    */
   public String visit(NoOpStmt n) {
      String ans = "";
      n.f0.accept(this);
      ans += "\tnop\n";
      return ans;
   }

   /**
    * f0 -> "ERROR"
    */
   public String visit(ErrorStmt n) {
      String ans = "";
      ans += "\tli $v0, 10\n";
      ans += "\tsyscall\n";
      n.f0.accept(this);
      return ans;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public String visit(CJumpStmt n) {
      String ans = "";
      ans += "\tbeqz $" + n.f1.f0.choice.toString() + ", " + n.f2.f0.tokenImage + "\n";
      n.f0.accept(this);
      n.f1.accept(this);
      notLabel = true;
      n.f2.accept(this);
      notLabel = false;
      return ans;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public String visit(JumpStmt n) {
      String ans = "";
      ans += "\tb " + n.f1.f0.tokenImage + "\n";
      n.f0.accept(this);
      notLabel = true;
      n.f1.accept(this);
      notLabel = false;
      return ans;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public String visit(HStoreStmt n) {
      String ans = "";
      ans += "\tsw $" + n.f3.f0.choice.toString() + ", " + n.f2.f0.tokenImage + "($" + n.f1.f0.choice.toString() + ")\n";
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return ans;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public String visit(HLoadStmt n) {
      String ans = "";
      ans += "\tlw $" + n.f1.f0.choice.toString() + ", " + n.f3.f0.tokenImage + "($" + n.f2.f0.choice.toString() + ")\n";
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return ans;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public String visit(MoveStmt n) {
      String ans = "";
      n.f0.accept(this);
      n.f1.accept(this);
      String r1 = reg;
      fromIntegerLiteral = false;
      fromOperator = false;
      fromLabel = false;
      String s = n.f2.accept(this);
      String r2 = reg;
      if(!s.equals("")){
         ans += s;
      }
      if(fromOperator){
         ans += "\t" + operator + " " + r1 + ", " + r2 + "\n";
         fromOperator = false;
      }
      else if(fromIntegerLiteral){
         ans += "\tli " + r1 + ", " + r2 + "\n";
         fromIntegerLiteral = false;
      }
      else if(fromLabel){
         ans += "\tla " + r1 + ", " + r2 + "\n";
         fromLabel = false;
      }
      else{
         ans += "\tmove " + r1 + ", " + r2 + "\n";
      }
      return ans;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public String visit(PrintStmt n) {
      String ans = "";
      n.f0.accept(this);
      fromIntegerLiteral = false;
      String s = n.f1.accept(this);
      String r = reg;
      if(fromIntegerLiteral){
         ans += "\tli $a0, " + r + "\n";
         fromIntegerLiteral = false;
      }
      else{
         ans += "\tmove $a0, " + r + "\n";
      }
      ans += "\tli $v0, 1\n";
      ans += "\tsyscall\n";
      ans += "\tla $a0, newline\n";
      ans += "\tli $v0, 4\n";
      ans += "\tsyscall\n";
      return ans;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public String visit(ALoadStmt n) {
      String ans = "";
      n.f0.accept(this);
      n.f1.accept(this);
      String r1 = reg;
      n.f2.accept(this);
      int num = spilledNumber;
      ans += "\tlw " + r1 + ", -" + (num + 2) * 4 + "($fp)\n";
      return ans;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public String visit(AStoreStmt n) {
      String ans = "";
      n.f0.accept(this);
      n.f1.accept(this);
      int num = spilledNumber;
      n.f2.accept(this);
      String r1 = reg;
      ans += "\tsw " + r1 + ", -" + (num + 2) * 4 + "($fp)\n";
      return ans;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public String visit(PassArgStmt n) {
      String ans = "";
      n.f0.accept(this);
      n.f1.accept(this);
      int num = Integer.parseInt(n.f1.f0.tokenImage) - 1;
      n.f2.accept(this);
      String r1 = reg;
      passarg.put(num, passargCount * 4);
      ans += "\tsw " + r1 + ", -" + (num + 2) * 4 + "($sp)\n";
      return ans;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public String visit(CallStmt n) {
      String ans = "";
      n.f0.accept(this);
      String s = n.f1.accept(this);
      String r = reg;
      ans += "\tjalr " + r + "\n";
      return ans;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public String visit(Exp n) {
      String ans = "";
      ans += n.f0.accept(this);
      return ans;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public String visit(HAllocate n) {
      String ans = "";
      n.f0.accept(this);
      fromIntegerLiteral = false;
      String s = n.f1.accept(this);
      String r = reg;
      if(fromIntegerLiteral){
         ans += "\tli $a0, " + r + "\n";
         fromIntegerLiteral = false;
      }
      else{
         ans += "\tmove $a0, " + r + "\n";
      }
      ans += "\tli $v0, 9\n";
      ans += "\tsyscall\n";
      reg = "$v0";
      return ans;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public String visit(BinOp n) {
      String ans = "";
      n.f0.accept(this);
      n.f1.accept(this);
      String r1 = reg;
      String s = n.f2.accept(this);
      String r2 = reg;
      reg = r1 + ", " + r2;
      fromOperator = true;
      return ans;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public String visit(Operator n) {
      String ans = "";
      n.f0.accept(this);
      operator = n.f0.choice.toString();
      if(operator.equals("LE")){
         operator = "sle";
      }
      else if(operator.equals("NE")){
         operator = "sne";
      }
      else if(operator.equals("PLUS")){
         operator = "add";
      }
      else if(operator.equals("MINUS")){
         operator = "sub";
      }
      else if(operator.equals("TIMES")){
         operator = "mul";
      }
      else if(operator.equals("DIV")){
         operator = "div";
      }
      return ans;
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public String visit(SpilledArg n) {
      String ans = "";
      n.f0.accept(this);
      n.f1.accept(this);
      spilledNumber = Integer.parseInt(n.f1.f0.tokenImage);
      return ans;
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public String visit(SimpleExp n) {
      String ans = "";
      n.f0.accept(this);
      return ans;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public String visit(Reg n) {
      String ans = "";
      n.f0.accept(this);
      reg = "$" + n.f0.choice.toString();
      return ans;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public String visit(IntegerLiteral n) {
      String ans = "";
      n.f0.accept(this);
      fromIntegerLiteral = true;
      reg = n.f0.tokenImage;
      return ans;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public String visit(Label n) {
      String ans = "";
      n.f0.accept(this);
      if(!notLabel){
         stmtlst += n.f0.tokenImage + ":\n";
      }
      reg = n.f0.tokenImage;
      fromLabel = true;
      return ans;
   }

   /**
    * f0 -> "//"
    * f1 -> SpillStatus()
    */
   public String visit(SpillInfo n) {
      String ans = "";
      n.f0.accept(this);
      n.f1.accept(this);
      return ans;
   }

   /**
    * f0 -> <SPILLED>
    *       | <NOTSPILLED>
    */
   public String visit(SpillStatus n) {
      String ans = "";
      n.f0.accept(this);
      return ans;
   }

}
